****** Java Servlet ******

Servlet API — это спецификация, на которой построено любое
веб-приложение на Java, будь то приложение с веб-интерфейсом
или веб-сервис, который возвращает информацию согласно запросу.
Поэтому путь к пониманию работы веб-приложений на Java
начинается с понимания Servlet API.

Сервлет — это Java-класс, скомпилированный в байт-код. Сервлеты
управляются контейнером сервлетов, который иногда называют Servlet
Engine.

Сервлет контейнер — это расширение веб-сервера, которое предоставляет
функциональность сервлетов. В свою очередь сервлеты обеспечивают
взаимодействие с клиентом в парадигме запрос/ответ, которая и
реализуется сервлет-контейнером.

Сервлет-контейнер — это часть веб-сервера или сервера приложений, который
предоставляет сетевые сервисы, при помощи которых посылаются запросы и
ответы, формируются и обрабатываются MIME-based запросы и ответы.

(MIME — стандарт, спецификация, которая говорит, как надо кодировать
информацию и форматировать сообщения, чтобы их можно было пересылать
по интернету)

Кроме того, сервлет-контейнеры управляют жизненным циклом сервлетов
(т.е. решают, когда их создавать, удалять и т.п.). Все сервлет-контейнеры
должны поддерживать протокол HTTP для получения запросов и отправления
ответов.

Сервлет относится к «методикам» Java. Сочетает в себе особенности API и
CGI. Помогает разобраться с производительностью, так как все запросы будут
выполняться в едином потоке в одном и том же процессе.

Сервлеты не имеют никакой зависимости от платформы.

Servlet – это класс Java, который выполняется внутри Джава VM:

- Контейнер веб-утилиты вида Tomcat начинает загрузку сервлета.
Это происходит при первом обращении или в процессе запуска
сервера согласно установленным конфигурационным параметрам.
Servlet загружается и остается в подобном состоянии до тех пор,
пока не будет произведена явная выгрузка.

- Возможно отключение посредством остановки контейнера.

- Java Servlets имеет программный интерфейс, позволяющий вести
обработку запросов на низком уровне. Обработка ведется в едином
процессе посредством создания потоков внутри. Код предстоит
составлять так, чтобы он был безопасным.

****** JSP – нюансы ******

Еще один вариант, применяемый для приложений, написанных на
Джаве – это JSP. Разработка здесь больше не требует особых
временных затрат. Связано это с тем, что программисту предстоит
работать с шаблонами.

JSP – шаблоны страничек, похожих на ASP и PHP. Привязки к ПО и
аппаратным платформам нет.

Производительность ограничена:
- странички нужно компилировать в сервлеты, но только при
  первом обращении;
- servlets обрабатываются в JVM.

Основная нагрузка при реализации за счет кластеризации переходит
на аппаратное обеспечение.

****** Технология CGI *******

Создавая приложение на Джаве, программист должен предварительно
изучить возможные технологии работы веб-утилит. Есть вариант CGI.
Это – низкоуровневый вариант. Стандарт, который использует интерфейс.
Последний задействуется для связи внешней программы с сервером.

CGI обладает хорошей реализацией. Там можно использовать практически
любой язык программирования, а не просто Java или JavaScript.
Соответствующий вариант имеет следующие плюсы и минусы:

- универсален за счет отсутствия требований к платформам;
- позволяет использовать тот язык программирования, который хотим;
- CGI – это готовый к запуску файл, что делает затрудненным
  расширение системы.

Все это заставило программистов развиваться в технологиях работы с
серверными каналами. Теперь существуют более совершенные «версии»
технологий.

****** Как работает сервлет? ******

В коде сервлет - класс, который расширяет функциональность класса
HttpServlet и запускается внутри контейнера сервлетов. Сам сервлет
размещается на сервере, однако чтобы сервер мог использовать сервлет
для обработки запросов, сервер должен поддерживать движок или
контейнер сервлетов (servlet container/engine).

Например, Apache Tomcat по сути является контейнером сервлетов, поэтому
он может использовать сервлеты для обслуживания запросов.

Для обработки запроса в HttpServlet определен ряд методов, которые мы
можем переопределить в классе сервлета:

- doGet: обрабатывает запросы GET (получение данных);
- doPost: обрабатывает запросы POST (отправка данных);
- doPut: обрабатывает запросы PUT (отправка данных для изменения);
- doDelete: обрабатывает запросы DELETE (удаление данных);
- doHead: обрабатывает запросы HEAD;

Каждый метод обрабатывает определенный тип запросов HTTP, и мы можем
определить все эти методы, но, зачастую, работа идет в основном с
методами doGet и doPost.

Например, определение методов без реализации:

*********************************************************************************
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/hello")
public class HelloServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    }
    protected void doPut(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    }

    protected void doDelete(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

    }

    protected void doHead(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

    }
}
*********************************************************************************

Все методы в качестве параметра принимают два объекта:
- HttpServletRequest - хранит информацию о запросе;
- HttpServletResponse - управляет ответом на запрос.

****** Жизненный цикл сервлета ******

Для каждого сервлета движок сервлетов создает только одну копию. Вне зависимости от
того, сколько запросов будет отправлено сервлету, все запросы будут обрабатываться
только одной копией сервлета.

Объект сервлета создается либо при запуске движка сервлетов, либо когда сервлет
получает первый запрос. Затем для каждого запроса запускается поток, который
обращается к объекту сервлета.

При работе с сервлетом движок сервлетов вызывает у класса сервлета ряд методов,
которые определены в родительском абстрактном классе HttpServlet.

1. Когда движок сервлетов создает объект сервлета, у сервлета вызывается метод init().

   public void init(ServletConfig config) throws ServletException { }

Этот метод вызывается только один раз - при создании сервлета. Мы можем переопределить
этот метод, чтобы определить в нем некоторую логику инициализации.

2. Когда к сервлету приходит запрос, движок сервлетов вызывает метод service() сервлета.
А этот метод, исходя из типа запроса (GET, POST, PUT и т.д.) решает, какому методу сервлета
(doGet, doPost и т.д.) обрабатывать этот запрос.

   public void service(HttpServletRequest request, HttpServletResponse response)
                                                   throws IOException, ServletException { }

Этот метод также можно переопределить, однако в этом нет смысла. В реальности для обработки
запроса переопределяются методы onGet, onPost и т.д., которые обрабатывают конкретные типы
запросов.

3. Если объект сервлета долгое время не используется (к нему нет никаких запросов), или если
происходит завершение работы движка сервлетов, то движок сервлетов выгружает из памяти все
созданные экземпляры сервлетов. Однако до выгрузки сервлета из памяти у сервлета вызывается
метод destroy().

   public void destroy()

При необходимости мы также можем его переопределить, например, определить в нем логику
логгирования или что иное. В то же время следует учитывать, что если сервер вдруг упадет
по какой-то причине, например, отключится электричество и т.д., тогда данный метод
естественно не будет вызван и его логика не сработает.


Поскольку для обработки всех запросов создается один экземпляр сервлета, и все обращения к
нему идут в отдельных потоках, то не рекомендуется в классе сервлета объявлять и использовать
глобальные переменные, так как они не будут потокобезопасными.