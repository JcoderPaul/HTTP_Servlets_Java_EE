****** ResourceBundle ******

Класс ResourceBundle используется для хранения текста и объектов, которые
чувствительны к локали. Обычно мы используем файлы свойств для хранения
текста, определенного для локали, а затем представляем их с помощью объекта
ResourceBundle.

Ниже приведены инструкции по использованию файла свойств, специфичного для
локали, в приложении на основе Java.

***  Шаг 1: Создадим файлы свойств. ***

Предположим, нам нужен файл свойств для английской локали. Создаем имя файла
свойств XXX_en_US.properties, где XXX – это имя файла, а en_US – языковой
стандарт для английского языка (США).

У нас это файл по умолчанию: translations.properties

******************************************************************************
page.login.email=Email
page.login.message.error=Email or password is not correct!
page.login.password=Password
page.login.register.button=REGISTRATION
page.login.submit.button=LOGIN
******************************************************************************

Далее создадим файл свойств для русской локали. Имя файла свойств
XXX_ru_RU.properties, где XXX – это имя файла, а ru_RU – языковой
стандарт для русского языка (Россия).

translations_ru_RU.properties

******************************************************************************
page.login.email=Электронная почта
page.login.message.error=Электронная почта или пароль не верны!
page.login.password=Пароль
page.login.register.button=РЕГИСТРАЦИЯ
page.login.submit.button=ВХОД
******************************************************************************

Явным образом видно, что ключ один и тот же, но значение зависит от локали в
файле свойств.

*** Шаг 2. Создаем объект ResourceBundle ***

Создаем объект ResourceBundle с именем файла свойств и языковым стандартом,
используя следующий синтаксис:

******************************************************************************
ResourceBundle bundle = ResourceBundle.getBundle("translations", Locale.RU);
******************************************************************************

*** Шаг 3: Получаем значение из объекта ResourceBundle. ***

Получаем значение из объекта ResourceBundle, передав ключ.

******************************************************************************
String email = bundle.getString("page.login.email");
******************************************************************************


------------------------------------------------------------------------------
****** Class ResourceBundle ******
------------------------------------------------------------------------------

java.lang.Object
java.util.ResourceBundle

Прямые известные классы наследники: ListResourceBundle,
                                    PropertyResourceBundle

См. так же: ListResourceBundle, PropertyResourceBundle, MissingResourceException
------------------------------------------------------------------------------
Пакеты ресурсов содержат объекты, зависящие от локали. Когда вашей программе
требуется ресурс, специфичный для локали, например String, ваша программа
может загрузить его из пакета ресурсов, который подходит для локали текущего
пользователя. Таким образом, вы можете написать программный код, который в
значительной степени не зависит от языкового стандарта пользователя, изолируя
большую часть, если не всю, специфичную для языкового стандарта информацию в
пакетах ресурсов.

Это позволяет вам писать программы, которые могут:
- быть легко локализованы или переведены на разные языки;
- обрабатывать несколько локалей одновременно;
- быть легко модифицированным позже для поддержки еще большего количества локалей.

Пакеты ресурсов принадлежат семействам, члены которых имеют общее базовое имя,
но имена которых также содержат дополнительные компоненты, идентифицирующие их
локали. Например, базовое имя семейства пакетов ресурсов может быть «MyResources».

Семейство должно иметь набор ресурсов по умолчанию, который просто имеет то же имя,
что и его семейство — «MyResources» — и будет использоваться в качестве последнего
средства, если конкретная локаль не поддерживается. Затем семейство может
предоставить столько элементов, зависящих от локали, сколько необходимо, например,
немецкий элемент с именем «MyResources_de».

Каждый набор ресурсов в семействе содержит одни и те же элементы, но элементы были
переведены для языкового стандарта, представленного этим набором ресурсов. Например,
и "MyResources", и "MyResources_de" могут иметь строку, которая используется на
кнопке для отмены операций. В «MyResources» строка может содержать «Cancel», а в
«MyResources_de» — «Abbrechen».

Если есть разные ресурсы для разных стран, можно сделать специализации: например,
«MyResources_de_CH» содержит объекты для немецкого языка (de) в Швейцарии (CH).
Если вы хотите изменить только некоторые ресурсы в специализации, вы можете это
сделать.

Когда вашей программе нужен объект, зависящий от локали, она загружает класс
ResourceBundle с помощью метода getBundle:

******************************************************************************
ResourceBundle myResources =
      ResourceBundle.getBundle("MyResources", currentLocale);
******************************************************************************

Пакеты ресурсов содержат пары ключ/значение. Ключи однозначно идентифицируют
объект в пакете, зависящий от локали. Вот пример ListResourceBundle, который
содержит две пары ключ/значение:

******************************************************************************
public class MyResources extends ListResourceBundle {
     protected Object[][] getContents() {
         return new Object[][] {
             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., "OK")
             {"OkKey", "OK"},
             {"CancelKey", "Cancel"},
             // END OF MATERIAL TO LOCALIZE
        };
     }
 }
******************************************************************************

Ключи всегда являются строками. В этом примере это клавиши «OkKey» и «CancelKey».
В приведенном выше примере значения также являются строками — «Ok» и «Cancel» —
но это не обязательно. Значения могут быть любым типом объекта.

Вы извлекаете объект из пакета ресурсов, используя соответствующий метод получения.
Поскольку "OkKey" и "CancelKey" являются строками, вы должны использовать getString
для их извлечения:

******************************************************************************
 button1 = new Button(myResources.getString("OkKey"));
 button2 = new Button(myResources.getString("CancelKey"));
******************************************************************************

Все методы получения требуют ключ в качестве аргумента и возвращают объект,
если он найден. Если объект не найден, метод получения создает исключение
MissingResourceException.

Помимо getString, ResourceBundle также предоставляет метод для получения
строковых массивов, getStringArray, а также общий метод getObject для любого
другого типа объекта. При использовании getObject вам придется привести
результат к соответствующему типу. Например:

******************************************************************************
 int[] myIntegers = (int[]) myResources.getObject("intList");
******************************************************************************

Платформа Java предоставляет два подкласса ResourceBundle, ListResourceBundle и
PropertyResourceBundle, которые обеспечивают довольно простой способ создания
ресурсов. Как вы кратко видели в предыдущем примере, ListResourceBundle управляет
своим ресурсом как списком пар ключ/значение. PropertyResourceBundle использует
файл свойств для управления своими ресурсами.

Если ListResourceBundle или PropertyResourceBundle не соответствуют вашим потребностям,
вы можете написать свой собственный подкласс ResourceBundle. Ваши подклассы должны
переопределять два метода: handleGetObject и getKeys().

Реализация подкласса ResourceBundle должна быть потокобезопасной, если она одновременно
используется несколькими потоками. Реализации по умолчанию неабстрактных методов в этом
классе и методы в прямых известных конкретных подклассах ListResourceBundle и
PropertyResourceBundle являются потокобезопасными.

*** ResourceBundle.Control ***

Класс ResourceBundle.Control предоставляет информацию, необходимую для выполнения процесса
загрузки пакета фабричными методами getBundle, которые принимают экземпляр ResourceBundle.Control.
Вы можете реализовать свой собственный подкласс, чтобы включить нестандартные форматы пакетов
ресурсов, изменить стратегию поиска или определить параметры кэширования. Подробности смотрите
в описаниях класса и фабричного метода getBundle.

Для фабричных методов getBundle, которые не принимают экземпляр ResourceBundle.Control, их
поведение по умолчанию при загрузке пакета ресурсов можно изменить с помощью установленных
реализаций ResourceBundleControlProvider. Все установленные провайдеры обнаруживаются во время
загрузки класса ResourceBundle. Если какой-либо из поставщиков предоставляет ResourceBundle.Control
для заданного базового имени, этот ResourceBundle.Control будет использоваться вместо
ResourceBundle.Control по умолчанию. Если для поддержки одного и того же базового имени установлено
несколько поставщиков услуг, будет использоваться первый из них, возвращенный ServiceLoader.

*** Cache Management ***

Экземпляры пакетов ресурсов, созданные фабричными методами getBundle, кэшируются по умолчанию,
а фабричные методы возвращают один и тот же экземпляр пакета ресурсов несколько раз, если он
был кэширован. Клиенты getBundle могут очищать кеш, управлять временем жизни кэшированных
экземпляров пакетов ресурсов, используя значения времени жизни, или указывать, что экземпляры
пакетов ресурсов не кэшируются. Дополнительные сведения см. в описаниях фабричного метода
getBundle, clearCache, ResourceBundle.Control.getTimeToLive и ResourceBundle.Control.needsReload.

*** Пример ***

Ниже приведен очень простой пример подкласса ResourceBundle, MyResources, который управляет
двумя ресурсами (для большего количества ресурсов вы, вероятно, использовали бы MAP). Обратите
внимание, что вам не нужно указывать значение, если ResourceBundle «родительского уровня»
обрабатывает тот же ключ с тем же значением (как для okKey ниже).

******************************************************************************
 // default (English language, United States)
 public class MyResources extends ResourceBundle {
     public Object handleGetObject(String key) {
         if (key.equals("okKey")) return "Ok";
         if (key.equals("cancelKey")) return "Cancel";
         return null;
     }

     public Enumeration<String> getKeys() {
         return Collections.enumeration(keySet());
     }

     // Overrides handleKeySet() so that the getKeys() implementation
     // can rely on the keySet() value.
     protected Set<String> handleKeySet() {
         return new HashSet<String>(Arrays.asList("okKey", "cancelKey"));
     }
 }

 // German language
 public class MyResources_de extends MyResources {
     public Object handleGetObject(String key) {
         // don't need okKey, since parent level handles it.
         if (key.equals("cancelKey")) return "Abbrechen";
         return null;
     }

     protected Set<String> handleKeySet() {
         return new HashSet<String>(Arrays.asList("cancelKey"));
     }
 }
******************************************************************************

Вам не нужно ограничивать себя использованием одного семейства ResourceBundles.
Например, у вас может быть набор пакетов для сообщений об исключениях,
ExceptionResources (ExceptionResources_fr, ExceptionResources_de, ...), и один
для виджетов, WidgetResource (WidgetResources_fr, WidgetResources_de, ...);
разбивайте ресурсы, как вам нравится.

*** Вложенные классы ***

static class ResourceBundle.Control - ResourceBundle.Control определяет набор
                                      методов обратного вызова, которые вызываются
                                      фабричными методами ResourceBundle.getBundle
                                      во время процесса загрузки пакета.

*** Поля ***

protected ResourceBundle parent - Родительский пакет для текущего пакета (Bundle).

*** Конструкторы ***

ResourceBundle()

*** Методы ***

static void clearCache() - Удаляет из кэша все пакеты ресурсов, которые
                           были загружены с помощью загрузчика классов
                           вызывающего объекта.

static void	clearCache(ClassLoader loader) - Удаляет из кеша все пакеты ресурсов,
                                             которые были загружены с помощью данного
                                             загрузчика классов.

boolean	containsKey(String key) - Определяет, содержится ли данный ключ в этом
                                  ResourceBundle или его родительских пакетах.

String getBaseBundleName() - Возвращает базовое имя этого пакета, если известно,
                             или ноль, если неизвестно.

static ResourceBundle getBundle(String baseName) - Получает пакет ресурсов, используя указанное
                                                   базовое имя, языковой стандарт по умолчанию
                                                   и загрузчик классов вызывающего объекта.

static ResourceBundle getBundle(String baseName,
                                Locale locale) - Получает пакет ресурсов, используя указанное
                                                 базовое имя и языковой стандарт, а также загрузчик
                                                 классов вызывающего объекта.

static ResourceBundle getBundle(String baseName,
                                Locale locale,
                                ClassLoader loader) - Получает пакет ресурсов, используя указанное
                                                      базовое имя, языковой стандарт и загрузчик
                                                      классов.

static ResourceBundle getBundle(String baseName,
                                Locale targetLocale,
                                ClassLoader loader,
                                ResourceBundle.Control control) - Возвращает пакет ресурсов, используя
                                                                  указанное базовое имя, целевую локаль,
                                                                  загрузчик классов и элемент управления.

static ResourceBundle getBundle(String baseName,
                                Locale targetLocale,
                                ResourceBundle.Control control) - Возвращает пакет ресурсов, используя указанное
                                                                  базовое имя, целевую локаль и элемент управления,
                                                                  а также загрузчик классов вызывающего объекта.

static ResourceBundle getBundle(String baseName,
                                ResourceBundle.Control control) - Возвращает пакет ресурсов, используя указанное
                                                                  базовое имя, языковой стандарт по умолчанию и
                                                                  указанный элемент управления.

abstract Enumeration<String> getKeys() - Возвращает перечисление ключей.

Locale getLocale() - Возвращает языковой стандарт этого пакета ресурсов.

Object getObject(String key) - Получает объект для данного ключа из этого пакета
                               ресурсов или одного из его родителей.

String getString(String key) - Получает строку для данного ключа из этого пакета ресурсов
                               или одного из его родителей.

String[] getStringArray(String key) - Получает массив строк для данного ключа из
                                      этого пакета ресурсов или одного из его родителей.

protected abstract Object handleGetObject(String key) - Получает объект для данного ключа
                                                        из этого пакета ресурсов.

protected Set<String> handleKeySet() - Возвращает набор ключей, содержащихся
                                       только в этом ResourceBundle.

Set<String> keySet() - Возвращает набор всех ключей, содержащихся в этом ResourceBundle
                       и его родительских пакетах.

protected void setParent(ResourceBundle parent) - Задает родительский пакет этого пакета.

-----------------------------------------------------------------------------------------------
Методы унаследованные от класса java.lang.Object: clone, equals, finalize, getClass, hashCode,
                                                  notify, notifyAll, toString, wait, wait, wait
-----------------------------------------------------------------------------------------------

***********************************************************************************************
См. полную версию: https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html
***********************************************************************************************